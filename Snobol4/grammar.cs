// Machine Generated C# Parsing File

namespace Snobol4
{
	public partial class Parser
	{

		    // Token Constants

		public readonly int BINARY_AMPERSAND = 1;
		public readonly int BINARY_AT = 2;
		public readonly int BINARY_CARET = 3;
		public readonly int BINARY_DOLLAR = 4;
		public readonly int BINARY_DOUBLE_STAR = 5;
		public readonly int BINARY_EQUAL = 6;
		public readonly int BINARY_EXCLAMATION = 7;
		public readonly int BINARY_HASH = 8;
		public readonly int BINARY_MINUS = 9;
		public readonly int BINARY_PERCENT = 10;
		public readonly int BINARY_PERIOD = 11;
		public readonly int BINARY_PIPE = 12;
		public readonly int BINARY_PLUS = 13;
		public readonly int BINARY_QUESTION = 14;
		public readonly int BINARY_SLASH = 15;
		public readonly int BINARY_SPACE = 16;
		public readonly int BINARY_STAR = 17;
		public readonly int BINARY_TILDE = 18;
		public readonly int COLON = 19;
		public readonly int COMMA = 20;
		public readonly int ERROR = 21;
		public readonly int F = 22;
		public readonly int IDENTIFIER = 23;
		public readonly int INTEGER = 24;
		public readonly int LABEL = 25;
		public readonly int LEFT_ANGLE_BRACKET = 26;
		public readonly int LEFT_PAREN = 27;
		public readonly int LEFT_SQUARE_BRACKET = 28;
		public readonly int MATCH_DELETE = 29;
		public readonly int MATCH_ONLY = 30;
		public readonly int MATCH_REPLACE = 31;
		public readonly int NO_LABEL = 32;
		public readonly int NULL = 33;
		public readonly int OBJECT_DELETE = 34;
		public readonly int OBJECT_REPLACE = 35;
		public readonly int REAL = 36;
		public readonly int RIGHT_ANGLE_BRACKET = 37;
		public readonly int RIGHT_PAREN = 38;
		public readonly int RIGHT_SQUARE_BRACKET = 39;
		public readonly int S = 40;
		public readonly int SPACE = 41;
		public readonly int STRING = 42;
		public readonly int UNARY_AMPERSAND = 43;
		public readonly int UNARY_AT = 44;
		public readonly int UNARY_CARET = 45;
		public readonly int UNARY_DOLLAR = 46;
		public readonly int UNARY_EQUAL = 47;
		public readonly int UNARY_EXCLAMATION = 48;
		public readonly int UNARY_HASH = 49;
		public readonly int UNARY_MINUS = 50;
		public readonly int UNARY_PERCENT = 51;
		public readonly int UNARY_PERIOD = 52;
		public readonly int UNARY_PIPE = 53;
		public readonly int UNARY_PLUS = 54;
		public readonly int UNARY_QUESTION = 55;
		public readonly int UNARY_SLASH = 56;
		public readonly int UNARY_STAR = 57;
		public readonly int UNARY_TILDE = 58;

		    // Parser Control Constants

		public int YYWILDCARD = 0;
		public bool YYFALLBACK = false;
		public int YYERRORSYMBOL = -1;
		public bool YYNOERRORRECOVERY = false;
		public bool NDEBUG = true;
		private readonly int YYNOCODE = 70;
		private readonly int YYSTACKDEPTH = 100;
		private readonly int YYNSTATE = 131;
		private readonly int YYNRULE = 67;
		private readonly int YYNTOKEN = 59;
		private readonly int YY_MAX_SHIFT = 130;
		private readonly int YY_MIN_SHIFTREDUCE = 131;
		private readonly int YY_MAX_SHIFTREDUCE = 197;
		private readonly int YY_ERROR_ACTION = 198;
		private readonly int YY_ACCEPT_ACTION = 199;
		private readonly int YY_NO_ACTION = 200;
		private readonly int YY_MIN_REDUCE = 201;
		private readonly int YY_MAX_REDUCE = 267;
		private readonly int YY_ACTTAB_COUNT = 2616;
		private readonly int YY_SHIFT_COUNT = 130;
		private readonly int YY_SHIFT_MIN = 0;
		private readonly int YY_SHIFT_MAX = 2577;
		private readonly int YY_REDUCE_COUNT = 54;
		private readonly int YY_REDUCE_MIN = -45;
		private readonly int YY_REDUCE_MAX = 299;

		    // Parse Tables Constants

		private readonly int[] yy_action =
		{
		 /*     0 */   224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
		 /*    10 */   224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
		 /*    20 */   224,   35,  105,  250,  123,   83,  224,    1,  224,  224,
		 /*    30 */   224,  224,  199,    6,  224,  224,   56,  224,  224,  224,
		 /*    40 */    35,  105,    7,  119,  129,   53,   52,  224,  246,  246,
		 /*    50 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
		 /*    60 */   246,  246,  246,  246,  246,  246,  246,  246,  246,   35,
		 /*    70 */   105,   57,  120,   16,  246,   54,  246,  246,  246,  246,
		 /*    80 */    36,  106,  246,  246,   58,  246,  246,  246,   35,  105,
		 /*    90 */    79,  121,  256,   35,  107,  246,  245,  245,  245,  245,
		 /*   100 */   245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
		 /*   110 */   245,  245,  245,  245,  245,  245,  245,   35,  105,  128,
		 /*   120 */   122,   59,  245,  127,  245,  245,  245,  245,   12,  103,
		 /*   130 */   245,  245,  125,  245,  245,  245,  102,   35,  109,   35,
		 /*   140 */   108,  125,   60,  245,  244,  244,  244,  244,  244,  244,
		 /*   150 */   244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
		 /*   160 */   244,  244,  244,  244,  244,   35,  110,  203,   35,  111,
		 /*   170 */   244,   61,  244,  244,  244,  244,   35,  112,  244,  244,
		 /*   180 */    62,  244,  244,  244,   35,   84,  203,   35,  114,   35,
		 /*   190 */   104,  244,  243,  243,  243,  243,  243,  243,  243,  243,
		 /*   200 */   243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
		 /*   210 */   243,  243,  243,   35,   85,   35,   86,   63,  243,   64,
		 /*   220 */   243,  243,  243,  243,   35,   87,  243,  243,   65,  243,
		 /*   230 */   243,  243,   35,   88,   66,   35,   89,   35,   90,  243,
		 /*   240 */   242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
		 /*   250 */   242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
		 /*   260 */   242,   35,   91,   35,   92,  201,  242,   67,  242,  242,
		 /*   270 */   242,  242,   35,   93,  242,  242,   68,  242,  242,  242,
		 /*   280 */    35,   94,   35,   95,  201,   35,   96,  242,  241,  241,
		 /*   290 */   241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
		 /*   300 */   241,  241,  241,  241,  241,  241,  241,  241,  241,   35,
		 /*   310 */    97,   35,   98,   69,  241,   70,  241,  241,  241,  241,
		 /*   320 */    35,   99,  241,  241,  126,  241,  241,  241,   35,  100,
		 /*   330 */    35,  101,  248,   35,  113,  241,  240,  240,  240,  240,
		 /*   340 */   240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
		 /*   350 */   240,  240,  240,  240,  240,  240,  240,  255,  249,   16,
		 /*   360 */    16,  130,  240,   16,  240,  240,  240,  240,  247,   13,
		 /*   370 */   240,  240,  248,  240,  240,  240,  257,   81,   80,  127,
		 /*   380 */   249,   34,   82,  240,  239,  239,  239,  239,  239,  239,
		 /*   390 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
		 /*   400 */   239,  239,  239,  239,  239,  258,   16,  254,  251,  200,
		 /*   410 */   239,  200,  239,  239,  239,  239,  200,  200,  239,  239,
		 /*   420 */   200,  239,  239,  239,   72,  200,  200,  200,  200,  200,
		 /*   430 */   200,  239,  238,  238,  238,  238,  238,  238,  238,  238,
		 /*   440 */   238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
		 /*   450 */   238,  238,  238,  200,  200,  200,  200,  200,  238,  200,
		 /*   460 */   238,  238,  238,  238,  200,  200,  238,  238,  200,  238,
		 /*   470 */   238,  238,  200,  200,  200,  200,  200,  200,  200,  238,
		 /*   480 */   237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
		 /*   490 */   237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
		 /*   500 */   237,  200,  200,  200,  200,  200,  237,  200,  237,  237,
		 /*   510 */   237,  237,  200,  200,  237,  237,  200,  237,  237,  237,
		 /*   520 */   200,  200,  200,  200,  200,  200,  200,  237,  236,  236,
		 /*   530 */   236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
		 /*   540 */   236,  236,  236,  236,  236,  236,  236,  236,  236,  200,
		 /*   550 */   200,  200,  200,  200,  236,  200,  236,  236,  236,  236,
		 /*   560 */   200,  200,  236,  236,  200,  236,  236,  236,  200,  200,
		 /*   570 */   200,  200,  200,  200,  200,  236,  235,  235,  235,  235,
		 /*   580 */   235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
		 /*   590 */   235,  235,  235,  235,  235,  235,  235,  200,  200,  200,
		 /*   600 */   200,  200,  235,  200,  235,  235,  235,  235,  200,  200,
		 /*   610 */   235,  235,  200,  235,  235,  235,  200,  200,  200,  200,
		 /*   620 */   200,  200,  200,  235,  234,  234,  234,  234,  234,  234,
		 /*   630 */   234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
		 /*   640 */   234,  234,  234,  234,  234,  200,  200,  200,  200,  200,
		 /*   650 */   234,  200,  234,  234,  234,  234,  200,  200,  234,  234,
		 /*   660 */   200,  234,  234,  234,  200,  200,  200,  200,  200,  200,
		 /*   670 */   200,  234,  233,  233,  233,  233,  233,  233,  233,  233,
		 /*   680 */   233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
		 /*   690 */   233,  233,  233,  200,  200,  200,  200,  200,  233,  200,
		 /*   700 */   233,  233,  233,  233,  200,  200,  233,  233,  200,  233,
		 /*   710 */   233,  233,  200,  200,  200,  200,  200,  200,  200,  233,
		 /*   720 */   232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
		 /*   730 */   232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
		 /*   740 */   232,  200,  200,  200,  200,  200,  232,  200,  232,  232,
		 /*   750 */   232,  232,  200,  200,  232,  232,  200,  232,  232,  232,
		 /*   760 */   200,  200,  200,  200,  200,  200,  200,  232,  261,  261,
		 /*   770 */   261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
		 /*   780 */   261,  261,  261,  261,  261,  261,  261,  261,  261,  200,
		 /*   790 */   200,  200,  200,  200,  261,  200,  261,  261,  261,  261,
		 /*   800 */   200,  200,  261,  261,  200,  261,  261,  261,  200,  200,
		 /*   810 */   200,  200,  200,  200,  200,  261,  231,  231,  231,  231,
		 /*   820 */   231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
		 /*   830 */   231,  231,  231,  231,  231,  231,  231,  200,  200,  200,
		 /*   840 */   200,  200,  231,  200,  231,  231,  231,  231,  200,  200,
		 /*   850 */   231,  231,  200,  231,  231,  231,  200,  200,  200,  200,
		 /*   860 */   200,  200,  200,  231,  230,  230,  230,  230,  230,  230,
		 /*   870 */   230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
		 /*   880 */   230,  230,  230,  230,  230,  200,  200,  200,  200,  200,
		 /*   890 */   230,  200,  230,  230,  230,  230,  200,  200,  230,  230,
		 /*   900 */   200,  230,  230,  230,  200,  200,  200,  200,  200,  200,
		 /*   910 */   200,  230,  229,  229,  229,  229,  229,  229,  229,  229,
		 /*   920 */   229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
		 /*   930 */   229,  229,  229,  200,  200,  200,  200,  200,  229,  200,
		 /*   940 */   229,  229,  229,  229,  200,  200,  229,  229,  200,  229,
		 /*   950 */   229,  229,  200,  200,  200,  200,  200,  200,  200,  229,
		 /*   960 */   228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
		 /*   970 */   228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
		 /*   980 */   228,  200,  200,  200,  200,  200,  228,  200,  228,  228,
		 /*   990 */   228,  228,  200,  200,  228,  228,  200,  228,  228,  228,
		 /*  1000 */   200,  200,  200,  200,  200,  200,  200,  228,  227,  227,
		 /*  1010 */   227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
		 /*  1020 */   227,  227,  227,  227,  227,  227,  227,  227,  227,  200,
		 /*  1030 */   200,  200,  200,  200,  227,  200,  227,  227,  227,  227,
		 /*  1040 */   200,  200,  227,  227,  200,  227,  227,  227,  200,  200,
		 /*  1050 */   200,  200,  200,  200,  200,  227,  226,  226,  226,  226,
		 /*  1060 */   226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
		 /*  1070 */   226,  226,  226,  226,  226,  226,  226,  200,  200,  200,
		 /*  1080 */   200,  200,  226,  200,  226,  226,  226,  226,  200,  200,
		 /*  1090 */   226,  226,  200,  226,  226,  226,  200,  200,  200,  200,
		 /*  1100 */   200,  200,  200,  226,  225,  225,  225,  225,  225,  225,
		 /*  1110 */   225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
		 /*  1120 */   225,  225,  225,  225,  225,  200,  200,  200,  200,  200,
		 /*  1130 */   225,  200,  225,  225,  225,  225,  200,  200,  225,  225,
		 /*  1140 */   200,  225,  225,  225,  200,  200,  200,  200,  200,  200,
		 /*  1150 */   200,  225,  260,  260,  260,  260,  260,  260,   14,  260,
		 /*  1160 */   260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
		 /*  1170 */   260,  260,  260,  200,  200,  200,  200,  200,    2,  200,
		 /*  1180 */     3,  200,  200,  200,  200,  200,  260,  260,  200,  260,
		 /*  1190 */   260,  260,  263,  263,  263,  263,  263,  263,  200,  263,
		 /*  1200 */   263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
		 /*  1210 */   263,  263,  263,  200,  200,  200,  200,  200,  263,  200,
		 /*  1220 */   263,  200,  200,  200,  200,  200,  263,  263,  200,  263,
		 /*  1230 */   263,  263,  262,  262,  262,  262,  262,  262,  200,  262,
		 /*  1240 */   262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
		 /*  1250 */   262,  262,  262,  200,  200,  200,  200,  200,  262,  200,
		 /*  1260 */   262,  200,  200,  200,  200,  200,  262,  262,  200,  262,
		 /*  1270 */   262,  262,  265,  265,  265,  265,  265,  265,  200,  265,
		 /*  1280 */   265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
		 /*  1290 */   265,  265,  265,  200,  200,  200,  200,  200,  265,  200,
		 /*  1300 */   265,  200,  200,  200,  200,  200,  265,  265,  200,  265,
		 /*  1310 */   265,  265,  264,  264,  264,  264,  264,  264,  200,  264,
		 /*  1320 */   264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
		 /*  1330 */   264,  264,  264,  200,  200,  200,  200,  200,  264,  200,
		 /*  1340 */   264,  200,  200,  200,  200,  200,  264,  264,  200,  264,
		 /*  1350 */   264,  264,  205,  205,  205,  205,  205,  205,  200,  205,
		 /*  1360 */   205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
		 /*  1370 */   205,  205,  205,  200,  200,  200,  200,  200,    4,  200,
		 /*  1380 */     5,  200,  200,  200,  200,  200,  205,  205,  200,  205,
		 /*  1390 */   205,  205,  260,  260,  260,  260,  260,  260,   14,  260,
		 /*  1400 */   260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
		 /*  1410 */   260,  260,  200,  200,  200,  200,  200,  200,    2,  200,
		 /*  1420 */     3,    9,    8,   11,  200,  200,  200,  200,  200,  200,
		 /*  1430 */   200,  200,  200,  200,  200,  200,  200,  200,  200,  116,
		 /*  1440 */   206,   17,   20,   29,   31,   27,  200,   28,   23,   21,
		 /*  1450 */    26,   30,   18,   22,   32,   24,   19,   25,   33,  206,
		 /*  1460 */   206,  200,  200,  200,  200,  200,  200,  200,  200,  200,
		 /*  1470 */   200,  200,  200,  200,  206,  206,  200,  206,  206,  206,
		 /*  1480 */   223,  223,   20,   29,   31,   27,  200,   28,   23,   21,
		 /*  1490 */    26,   30,   18,   22,   32,   24,   19,   25,   33,  223,
		 /*  1500 */   223,  200,  200,  200,  200,  200,  200,  200,  200,  200,
		 /*  1510 */   200,  200,  200,  200,  223,  223,  200,  223,  223,  223,
		 /*  1520 */   222,  222,   20,   29,   31,   27,  200,   28,   23,   21,
		 /*  1530 */    26,   30,  222,   22,   32,   24,   19,   25,   33,  222,
		 /*  1540 */   222,  200,  200,  200,  200,  200,  200,  200,  200,  200,
		 /*  1550 */   200,  200,  200,  200,  222,  222,  200,  222,  222,  222,
		 /*  1560 */   221,  221,   20,   29,   31,   27,  200,   28,   23,   21,
		 /*  1570 */    26,   30,  221,   22,   32,   24,  221,   25,   33,  221,
		 /*  1580 */   221,  200,  200,  200,  200,  200,  200,  200,  200,  200,
		 /*  1590 */   200,  200,  200,  200,  221,  221,  200,  221,  221,  221,
		 /*  1600 */   220,  220,  220,   29,   31,   27,  200,   28,   23,   21,
		 /*  1610 */    26,   30,  220,   22,   32,   24,  220,   25,   33,  220,
		 /*  1620 */   220,  200,  200,  200,  200,  200,  200,  200,  200,  200,
		 /*  1630 */   200,  200,  200,  200,  220,  220,  200,  220,  220,  220,
		 /*  1640 */   219,  219,  219,   29,   31,   27,  200,   28,   23,  219,
		 /*  1650 */    26,   30,  219,  219,   32,   24,  219,   25,   33,  219,
		 /*  1660 */   219,  200,  200,  200,  200,  200,  200,  200,  200,  200,
		 /*  1670 */   200,  200,  200,  200,  219,  219,  200,  219,  219,  219,
		 /*  1680 */   218,  218,  218,   29,   31,   27,  200,   28,   23,  218,
		 /*  1690 */    26,   30,  218,  218,   32,   24,  218,   25,   33,  218,
		 /*  1700 */   218,  200,  200,  200,  200,  200,  200,  200,  200,  200,
		 /*  1710 */   200,  200,  200,  200,  218,  218,  200,  218,  218,  218,
		 /*  1720 */   217,  217,  217,   29,   31,   27,  200,   28,  217,  217,
		 /*  1730 */    26,   30,  217,  217,   32,   24,  217,   25,   33,  217,
		 /*  1740 */   217,  200,  200,  200,  200,  200,  200,  200,  200,  200,
		 /*  1750 */   200,  200,  200,  200,  217,  217,  200,  217,  217,  217,
		 /*  1760 */   216,  216,  216,   29,   31,   27,  200,   28,  216,  216,
		 /*  1770 */    26,   30,  216,  216,   32,  216,  216,   25,   33,  216,
		 /*  1780 */   216,  200,  200,  200,  200,  200,  200,  200,  200,  200,
		 /*  1790 */   200,  200,  200,  200,  216,  216,  200,  216,  216,  216,
		 /*  1800 */   215,  215,  215,   29,   31,   27,  200,   28,  215,  215,
		 /*  1810 */    26,   30,  215,  215,   32,  215,  215,  215,   33,  215,
		 /*  1820 */   215,  200,  200,  200,  200,  200,  200,  200,  200,  200,
		 /*  1830 */   200,  200,  200,  200,  215,  215,  200,  215,  215,  215,
		 /*  1840 */   214,  214,  214,   29,   31,   27,  200,   28,  214,  214,
		 /*  1850 */   214,   30,  214,  214,   32,  214,  214,  214,   33,  214,
		 /*  1860 */   214,  200,  200,  200,  200,  200,  200,  200,  200,  200,
		 /*  1870 */   200,  200,  200,  200,  214,  214,  200,  214,  214,  214,
		 /*  1880 */   213,  213,  213,   29,   31,   27,  200,   28,  213,  213,
		 /*  1890 */   213,   30,  213,  213,   32,  213,  213,  213,   33,  213,
		 /*  1900 */   213,  200,  200,  200,  200,  200,  200,  200,  200,  200,
		 /*  1910 */   200,  200,  200,  200,  213,  213,  200,  213,  213,  213,
		 /*  1920 */   212,  212,  212,   29,   31,   27,  200,   28,  212,  212,
		 /*  1930 */   212,   30,  212,  212,   32,  212,  212,  212,   33,  212,
		 /*  1940 */   212,  200,  200,  200,  200,  200,  200,  200,  200,  200,
		 /*  1950 */   200,  200,  200,  200,  212,  212,  200,  212,  212,  212,
		 /*  1960 */   211,  211,  211,   29,   31,   27,  200,   28,  211,  211,
		 /*  1970 */   211,   30,  211,  211,   32,  211,  211,  211,   33,  211,
		 /*  1980 */   211,  200,  200,  200,  200,  200,  200,  200,  200,  200,
		 /*  1990 */   200,  200,  200,  200,  211,  211,  200,  211,  211,  211,
		 /*  2000 */   210,  210,  210,  210,  210,  210,  200,  210,  210,  210,
		 /*  2010 */   210,  210,  210,  210,   32,  210,  210,  210,   33,  210,
		 /*  2020 */   210,  200,  200,  200,  200,  200,  200,  200,  200,  200,
		 /*  2030 */   200,  200,  200,  200,  210,  210,  200,  210,  210,  210,
		 /*  2040 */   209,  209,  209,  209,  209,  209,  200,  209,  209,  209,
		 /*  2050 */   209,  209,  209,  209,   32,  209,  209,  209,   33,  209,
		 /*  2060 */   209,  200,  200,  200,  200,  200,  200,  200,  200,  200,
		 /*  2070 */   200,  200,  200,  200,  209,  209,  200,  209,  209,  209,
		 /*  2080 */   208,  208,  208,  208,  208,  208,  200,  208,  208,  208,
		 /*  2090 */   208,  208,  208,  208,  208,  208,  208,  208,   33,  208,
		 /*  2100 */   208,  200,  200,  200,  200,  200,  200,  200,  200,  200,
		 /*  2110 */   200,  200,  200,  200,  208,  208,  200,  208,  208,  208,
		 /*  2120 */   207,  207,  207,  207,  207,  207,  200,  207,  207,  207,
		 /*  2130 */   207,  207,  207,  207,  207,  207,  207,  207,   33,  207,
		 /*  2140 */   207,  200,  200,  200,  200,  200,   78,   55,   76,  200,
		 /*  2150 */   200,   15,  200,  200,  207,  207,  200,  207,  207,  207,
		 /*  2160 */    75,  200,   73,  200,   77,  200,   74,   51,   50,   49,
		 /*  2170 */    48,  200,   47,   46,   45,   44,   43,   42,   41,   40,
		 /*  2180 */    39,   38,   37,   78,   55,   76,  200,  200,   15,  200,
		 /*  2190 */   200,  200,  200,  200,  200,  200,  200,   75,  200,  200,
		 /*  2200 */   200,   77,  200,   74,   51,   50,   49,   48,  200,   47,
		 /*  2210 */    46,   45,   44,   43,   42,   41,   40,   39,   38,   37,
		 /*  2220 */   253,  253,  253,  200,  200,  253,  200,  200,  200,  200,
		 /*  2230 */   200,  200,  200,  200,  253,  200,  200,  200,  253,  200,
		 /*  2240 */   253,  253,  253,  253,  253,  200,  253,  253,  253,  253,
		 /*  2250 */   253,  253,  253,  253,  253,  253,  253,  252,  252,  252,
		 /*  2260 */   200,  200,  252,  200,  200,  200,  200,  200,  200,  200,
		 /*  2270 */   200,  252,  200,  200,  200,  252,  200,  252,  252,  252,
		 /*  2280 */   252,  252,  200,  252,  252,  252,  252,  252,  252,  252,
		 /*  2290 */   252,  252,  252,  252,   17,   20,   29,   31,   27,  200,
		 /*  2300 */    28,   23,   21,   26,   30,   18,   22,   32,   24,   19,
		 /*  2310 */    25,   33,  200,  267,  200,  200,  200,  200,  200,  200,
		 /*  2320 */   200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
		 /*  2330 */   267,  267,  267,   17,   20,   29,   31,   27,  200,   28,
		 /*  2340 */    23,   21,   26,   30,   18,   22,   32,   24,   19,   25,
		 /*  2350 */    33,  200,  266,  200,  200,  200,  200,  200,  200,  200,
		 /*  2360 */   200,  200,  200,  200,  200,  200,  200,  200,  200,  266,
		 /*  2370 */   266,  266,  259,   17,   20,   29,   31,   27,  200,   28,
		 /*  2380 */    23,   21,   26,   30,   18,   22,   32,   24,   19,   25,
		 /*  2390 */    33,  259,  204,   17,   20,   29,   31,   27,  200,   28,
		 /*  2400 */    23,   21,   26,   30,   18,   22,   32,   24,   19,   25,
		 /*  2410 */    33,  204,  202,   17,   20,   29,   31,   27,  200,   28,
		 /*  2420 */    23,   21,   26,   30,   18,   22,   32,   24,   19,   25,
		 /*  2430 */    33,  202,   17,   20,   29,   31,   27,  200,   28,   23,
		 /*  2440 */    21,   26,   30,   18,   22,   32,   24,   19,   25,   33,
		 /*  2450 */   200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
		 /*  2460 */   200,  200,  200,  200,  200,  115,  200,   17,   20,   29,
		 /*  2470 */    31,   27,  200,   28,   23,   21,   26,   30,   18,   22,
		 /*  2480 */    32,   24,   19,   25,   33,  200,  200,  200,  200,  200,
		 /*  2490 */   200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
		 /*  2500 */   200,   10,  200,   17,   20,   29,   31,   27,  200,   28,
		 /*  2510 */    23,   21,   26,   30,   18,   22,   32,   24,   19,   25,
		 /*  2520 */    33,   17,   20,   29,   31,   27,  200,   28,   23,   21,
		 /*  2530 */    26,   30,   18,   22,   32,   24,   19,   25,   33,  200,
		 /*  2540 */   124,  200,  200,  200,  200,  200,  200,  200,  200,  200,
		 /*  2550 */   200,  200,  200,  200,  200,  200,  200,  200,  117,  200,
		 /*  2560 */    17,   20,   29,   31,   27,  200,   28,   23,   21,   26,
		 /*  2570 */    30,   18,   22,   32,   24,   19,   25,   33,   17,   20,
		 /*  2580 */    29,   31,   27,  200,   28,   23,   21,   26,   30,   18,
		 /*  2590 */    22,   32,   24,   19,   25,   33,  200,  118,  200,  200,
		 /*  2600 */   200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
		 /*  2610 */   200,  200,  200,  200,  200,   71,
		};

		private readonly int[] yy_lookahead =
		{
		 /*     0 */     0,    1,    2,    3,    4,    5,    6,    7,    8,    9,
		 /*    10 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
		 /*    20 */    20,   66,   67,    0,   69,   68,   26,   27,   28,   29,
		 /*    30 */    30,   31,   59,   60,   34,   35,   66,   37,   38,   39,
		 /*    40 */    66,   67,   19,   69,   63,   64,   65,   47,    0,    1,
		 /*    50 */     2,    3,    4,    5,    6,    7,    8,    9,   10,   11,
		 /*    60 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   66,
		 /*    70 */    67,   66,   69,   20,   26,   61,   28,   29,   30,   31,
		 /*    80 */    66,   67,   34,   35,   66,   37,   38,   39,   66,   67,
		 /*    90 */    37,   69,    0,   66,   67,   47,    0,    1,    2,    3,
		 /*   100 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
		 /*   110 */    14,   15,   16,   17,   18,   19,   20,   66,   67,   65,
		 /*   120 */    69,   66,   26,   22,   28,   29,   30,   31,   27,   25,
		 /*   130 */    34,   35,   40,   37,   38,   39,   32,   66,   67,   66,
		 /*   140 */    67,   40,   66,   47,    0,    1,    2,    3,    4,    5,
		 /*   150 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
		 /*   160 */    16,   17,   18,   19,   20,   66,   67,    0,   66,   67,
		 /*   170 */    26,   66,   28,   29,   30,   31,   66,   67,   34,   35,
		 /*   180 */    66,   37,   38,   39,   66,   67,   19,   66,   67,   66,
		 /*   190 */    67,   47,    0,    1,    2,    3,    4,    5,    6,    7,
		 /*   200 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
		 /*   210 */    18,   19,   20,   66,   67,   66,   67,   66,   26,   66,
		 /*   220 */    28,   29,   30,   31,   66,   67,   34,   35,   66,   37,
		 /*   230 */    38,   39,   66,   67,   66,   66,   67,   66,   67,   47,
		 /*   240 */     0,    1,    2,    3,    4,    5,    6,    7,    8,    9,
		 /*   250 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
		 /*   260 */    20,   66,   67,   66,   67,    0,   26,   66,   28,   29,
		 /*   270 */    30,   31,   66,   67,   34,   35,   66,   37,   38,   39,
		 /*   280 */    66,   67,   66,   67,   19,   66,   67,   47,    0,    1,
		 /*   290 */     2,    3,    4,    5,    6,    7,    8,    9,   10,   11,
		 /*   300 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   66,
		 /*   310 */    67,   66,   67,   66,   26,   66,   28,   29,   30,   31,
		 /*   320 */    66,   67,   34,   35,   64,   37,   38,   39,   66,   67,
		 /*   330 */    66,   67,    0,   66,   67,   47,    0,    1,    2,    3,
		 /*   340 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
		 /*   350 */    14,   15,   16,   17,   18,   19,   20,    0,    0,   20,
		 /*   360 */    20,   62,   26,   20,   28,   29,   30,   31,    0,   27,
		 /*   370 */    34,   35,   40,   37,   38,   39,    0,   37,   39,   22,
		 /*   380 */    22,   27,   39,   47,    0,    1,    2,    3,    4,    5,
		 /*   390 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
		 /*   400 */    16,   17,   18,   19,   20,    0,   20,    0,    0,   70,
		 /*   410 */    26,   70,   28,   29,   30,   31,   70,   70,   34,   35,
		 /*   420 */    70,   37,   38,   39,   38,   70,   70,   70,   70,   70,
		 /*   430 */    70,   47,    0,    1,    2,    3,    4,    5,    6,    7,
		 /*   440 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
		 /*   450 */    18,   19,   20,   70,   70,   70,   70,   70,   26,   70,
		 /*   460 */    28,   29,   30,   31,   70,   70,   34,   35,   70,   37,
		 /*   470 */    38,   39,   70,   70,   70,   70,   70,   70,   70,   47,
		 /*   480 */     0,    1,    2,    3,    4,    5,    6,    7,    8,    9,
		 /*   490 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
		 /*   500 */    20,   70,   70,   70,   70,   70,   26,   70,   28,   29,
		 /*   510 */    30,   31,   70,   70,   34,   35,   70,   37,   38,   39,
		 /*   520 */    70,   70,   70,   70,   70,   70,   70,   47,    0,    1,
		 /*   530 */     2,    3,    4,    5,    6,    7,    8,    9,   10,   11,
		 /*   540 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   70,
		 /*   550 */    70,   70,   70,   70,   26,   70,   28,   29,   30,   31,
		 /*   560 */    70,   70,   34,   35,   70,   37,   38,   39,   70,   70,
		 /*   570 */    70,   70,   70,   70,   70,   47,    0,    1,    2,    3,
		 /*   580 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
		 /*   590 */    14,   15,   16,   17,   18,   19,   20,   70,   70,   70,
		 /*   600 */    70,   70,   26,   70,   28,   29,   30,   31,   70,   70,
		 /*   610 */    34,   35,   70,   37,   38,   39,   70,   70,   70,   70,
		 /*   620 */    70,   70,   70,   47,    0,    1,    2,    3,    4,    5,
		 /*   630 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
		 /*   640 */    16,   17,   18,   19,   20,   70,   70,   70,   70,   70,
		 /*   650 */    26,   70,   28,   29,   30,   31,   70,   70,   34,   35,
		 /*   660 */    70,   37,   38,   39,   70,   70,   70,   70,   70,   70,
		 /*   670 */    70,   47,    0,    1,    2,    3,    4,    5,    6,    7,
		 /*   680 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
		 /*   690 */    18,   19,   20,   70,   70,   70,   70,   70,   26,   70,
		 /*   700 */    28,   29,   30,   31,   70,   70,   34,   35,   70,   37,
		 /*   710 */    38,   39,   70,   70,   70,   70,   70,   70,   70,   47,
		 /*   720 */     0,    1,    2,    3,    4,    5,    6,    7,    8,    9,
		 /*   730 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
		 /*   740 */    20,   70,   70,   70,   70,   70,   26,   70,   28,   29,
		 /*   750 */    30,   31,   70,   70,   34,   35,   70,   37,   38,   39,
		 /*   760 */    70,   70,   70,   70,   70,   70,   70,   47,    0,    1,
		 /*   770 */     2,    3,    4,    5,    6,    7,    8,    9,   10,   11,
		 /*   780 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   70,
		 /*   790 */    70,   70,   70,   70,   26,   70,   28,   29,   30,   31,
		 /*   800 */    70,   70,   34,   35,   70,   37,   38,   39,   70,   70,
		 /*   810 */    70,   70,   70,   70,   70,   47,    0,    1,    2,    3,
		 /*   820 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
		 /*   830 */    14,   15,   16,   17,   18,   19,   20,   70,   70,   70,
		 /*   840 */    70,   70,   26,   70,   28,   29,   30,   31,   70,   70,
		 /*   850 */    34,   35,   70,   37,   38,   39,   70,   70,   70,   70,
		 /*   860 */    70,   70,   70,   47,    0,    1,    2,    3,    4,    5,
		 /*   870 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
		 /*   880 */    16,   17,   18,   19,   20,   70,   70,   70,   70,   70,
		 /*   890 */    26,   70,   28,   29,   30,   31,   70,   70,   34,   35,
		 /*   900 */    70,   37,   38,   39,   70,   70,   70,   70,   70,   70,
		 /*   910 */    70,   47,    0,    1,    2,    3,    4,    5,    6,    7,
		 /*   920 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
		 /*   930 */    18,   19,   20,   70,   70,   70,   70,   70,   26,   70,
		 /*   940 */    28,   29,   30,   31,   70,   70,   34,   35,   70,   37,
		 /*   950 */    38,   39,   70,   70,   70,   70,   70,   70,   70,   47,
		 /*   960 */     0,    1,    2,    3,    4,    5,    6,    7,    8,    9,
		 /*   970 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
		 /*   980 */    20,   70,   70,   70,   70,   70,   26,   70,   28,   29,
		 /*   990 */    30,   31,   70,   70,   34,   35,   70,   37,   38,   39,
		 /*  1000 */    70,   70,   70,   70,   70,   70,   70,   47,    0,    1,
		 /*  1010 */     2,    3,    4,    5,    6,    7,    8,    9,   10,   11,
		 /*  1020 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   70,
		 /*  1030 */    70,   70,   70,   70,   26,   70,   28,   29,   30,   31,
		 /*  1040 */    70,   70,   34,   35,   70,   37,   38,   39,   70,   70,
		 /*  1050 */    70,   70,   70,   70,   70,   47,    0,    1,    2,    3,
		 /*  1060 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
		 /*  1070 */    14,   15,   16,   17,   18,   19,   20,   70,   70,   70,
		 /*  1080 */    70,   70,   26,   70,   28,   29,   30,   31,   70,   70,
		 /*  1090 */    34,   35,   70,   37,   38,   39,   70,   70,   70,   70,
		 /*  1100 */    70,   70,   70,   47,    0,    1,    2,    3,    4,    5,
		 /*  1110 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
		 /*  1120 */    16,   17,   18,   19,   20,   70,   70,   70,   70,   70,
		 /*  1130 */    26,   70,   28,   29,   30,   31,   70,   70,   34,   35,
		 /*  1140 */    70,   37,   38,   39,   70,   70,   70,   70,   70,   70,
		 /*  1150 */    70,   47,    0,    1,    2,    3,    4,    5,    6,    7,
		 /*  1160 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
		 /*  1170 */    18,   19,   20,   70,   70,   70,   70,   70,   26,   70,
		 /*  1180 */    28,   70,   70,   70,   70,   70,   34,   35,   70,   37,
		 /*  1190 */    38,   39,    0,    1,    2,    3,    4,    5,   70,    7,
		 /*  1200 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
		 /*  1210 */    18,   19,   20,   70,   70,   70,   70,   70,   26,   70,
		 /*  1220 */    28,   70,   70,   70,   70,   70,   34,   35,   70,   37,
		 /*  1230 */    38,   39,    0,    1,    2,    3,    4,    5,   70,    7,
		 /*  1240 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
		 /*  1250 */    18,   19,   20,   70,   70,   70,   70,   70,   26,   70,
		 /*  1260 */    28,   70,   70,   70,   70,   70,   34,   35,   70,   37,
		 /*  1270 */    38,   39,    0,    1,    2,    3,    4,    5,   70,    7,
		 /*  1280 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
		 /*  1290 */    18,   19,   20,   70,   70,   70,   70,   70,   26,   70,
		 /*  1300 */    28,   70,   70,   70,   70,   70,   34,   35,   70,   37,
		 /*  1310 */    38,   39,    0,    1,    2,    3,    4,    5,   70,    7,
		 /*  1320 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
		 /*  1330 */    18,   19,   20,   70,   70,   70,   70,   70,   26,   70,
		 /*  1340 */    28,   70,   70,   70,   70,   70,   34,   35,   70,   37,
		 /*  1350 */    38,   39,    0,    1,    2,    3,    4,    5,   70,    7,
		 /*  1360 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
		 /*  1370 */    18,   19,   20,   70,   70,   70,   70,   70,   26,   70,
		 /*  1380 */    28,   70,   70,   70,   70,   70,   34,   35,   70,   37,
		 /*  1390 */    38,   39,    0,    1,    2,    3,    4,    5,    6,    7,
		 /*  1400 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
		 /*  1410 */    18,   19,   70,   70,   70,   70,   70,   70,   26,   70,
		 /*  1420 */    28,   29,   30,   31,   70,   70,   70,   70,   70,   70,
		 /*  1430 */    70,   70,   70,   70,   70,   70,   70,   70,   70,   47,
		 /*  1440 */     0,    1,    2,    3,    4,    5,   70,    7,    8,    9,
		 /*  1450 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
		 /*  1460 */    20,   70,   70,   70,   70,   70,   70,   70,   70,   70,
		 /*  1470 */    70,   70,   70,   70,   34,   35,   70,   37,   38,   39,
		 /*  1480 */     0,    1,    2,    3,    4,    5,   70,    7,    8,    9,
		 /*  1490 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
		 /*  1500 */    20,   70,   70,   70,   70,   70,   70,   70,   70,   70,
		 /*  1510 */    70,   70,   70,   70,   34,   35,   70,   37,   38,   39,
		 /*  1520 */     0,    1,    2,    3,    4,    5,   70,    7,    8,    9,
		 /*  1530 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
		 /*  1540 */    20,   70,   70,   70,   70,   70,   70,   70,   70,   70,
		 /*  1550 */    70,   70,   70,   70,   34,   35,   70,   37,   38,   39,
		 /*  1560 */     0,    1,    2,    3,    4,    5,   70,    7,    8,    9,
		 /*  1570 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
		 /*  1580 */    20,   70,   70,   70,   70,   70,   70,   70,   70,   70,
		 /*  1590 */    70,   70,   70,   70,   34,   35,   70,   37,   38,   39,
		 /*  1600 */     0,    1,    2,    3,    4,    5,   70,    7,    8,    9,
		 /*  1610 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
		 /*  1620 */    20,   70,   70,   70,   70,   70,   70,   70,   70,   70,
		 /*  1630 */    70,   70,   70,   70,   34,   35,   70,   37,   38,   39,
		 /*  1640 */     0,    1,    2,    3,    4,    5,   70,    7,    8,    9,
		 /*  1650 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
		 /*  1660 */    20,   70,   70,   70,   70,   70,   70,   70,   70,   70,
		 /*  1670 */    70,   70,   70,   70,   34,   35,   70,   37,   38,   39,
		 /*  1680 */     0,    1,    2,    3,    4,    5,   70,    7,    8,    9,
		 /*  1690 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
		 /*  1700 */    20,   70,   70,   70,   70,   70,   70,   70,   70,   70,
		 /*  1710 */    70,   70,   70,   70,   34,   35,   70,   37,   38,   39,
		 /*  1720 */     0,    1,    2,    3,    4,    5,   70,    7,    8,    9,
		 /*  1730 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
		 /*  1740 */    20,   70,   70,   70,   70,   70,   70,   70,   70,   70,
		 /*  1750 */    70,   70,   70,   70,   34,   35,   70,   37,   38,   39,
		 /*  1760 */     0,    1,    2,    3,    4,    5,   70,    7,    8,    9,
		 /*  1770 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
		 /*  1780 */    20,   70,   70,   70,   70,   70,   70,   70,   70,   70,
		 /*  1790 */    70,   70,   70,   70,   34,   35,   70,   37,   38,   39,
		 /*  1800 */     0,    1,    2,    3,    4,    5,   70,    7,    8,    9,
		 /*  1810 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
		 /*  1820 */    20,   70,   70,   70,   70,   70,   70,   70,   70,   70,
		 /*  1830 */    70,   70,   70,   70,   34,   35,   70,   37,   38,   39,
		 /*  1840 */     0,    1,    2,    3,    4,    5,   70,    7,    8,    9,
		 /*  1850 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
		 /*  1860 */    20,   70,   70,   70,   70,   70,   70,   70,   70,   70,
		 /*  1870 */    70,   70,   70,   70,   34,   35,   70,   37,   38,   39,
		 /*  1880 */     0,    1,    2,    3,    4,    5,   70,    7,    8,    9,
		 /*  1890 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
		 /*  1900 */    20,   70,   70,   70,   70,   70,   70,   70,   70,   70,
		 /*  1910 */    70,   70,   70,   70,   34,   35,   70,   37,   38,   39,
		 /*  1920 */     0,    1,    2,    3,    4,    5,   70,    7,    8,    9,
		 /*  1930 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
		 /*  1940 */    20,   70,   70,   70,   70,   70,   70,   70,   70,   70,
		 /*  1950 */    70,   70,   70,   70,   34,   35,   70,   37,   38,   39,
		 /*  1960 */     0,    1,    2,    3,    4,    5,   70,    7,    8,    9,
		 /*  1970 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
		 /*  1980 */    20,   70,   70,   70,   70,   70,   70,   70,   70,   70,
		 /*  1990 */    70,   70,   70,   70,   34,   35,   70,   37,   38,   39,
		 /*  2000 */     0,    1,    2,    3,    4,    5,   70,    7,    8,    9,
		 /*  2010 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
		 /*  2020 */    20,   70,   70,   70,   70,   70,   70,   70,   70,   70,
		 /*  2030 */    70,   70,   70,   70,   34,   35,   70,   37,   38,   39,
		 /*  2040 */     0,    1,    2,    3,    4,    5,   70,    7,    8,    9,
		 /*  2050 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
		 /*  2060 */    20,   70,   70,   70,   70,   70,   70,   70,   70,   70,
		 /*  2070 */    70,   70,   70,   70,   34,   35,   70,   37,   38,   39,
		 /*  2080 */     0,    1,    2,    3,    4,    5,   70,    7,    8,    9,
		 /*  2090 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
		 /*  2100 */    20,   70,   70,   70,   70,   70,   70,   70,   70,   70,
		 /*  2110 */    70,   70,   70,   70,   34,   35,   70,   37,   38,   39,
		 /*  2120 */     0,    1,    2,    3,    4,    5,   70,    7,    8,    9,
		 /*  2130 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
		 /*  2140 */    20,   70,   70,   70,   70,   70,   22,   23,   24,   70,
		 /*  2150 */    70,   27,   70,   70,   34,   35,   70,   37,   38,   39,
		 /*  2160 */    36,   70,   38,   70,   40,   70,   42,   43,   44,   45,
		 /*  2170 */    46,   70,   48,   49,   50,   51,   52,   53,   54,   55,
		 /*  2180 */    56,   57,   58,   22,   23,   24,   70,   70,   27,   70,
		 /*  2190 */    70,   70,   70,   70,   70,   70,   70,   36,   70,   70,
		 /*  2200 */    70,   40,   70,   42,   43,   44,   45,   46,   70,   48,
		 /*  2210 */    49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
		 /*  2220 */    22,   23,   24,   70,   70,   27,   70,   70,   70,   70,
		 /*  2230 */    70,   70,   70,   70,   36,   70,   70,   70,   40,   70,
		 /*  2240 */    42,   43,   44,   45,   46,   70,   48,   49,   50,   51,
		 /*  2250 */    52,   53,   54,   55,   56,   57,   58,   22,   23,   24,
		 /*  2260 */    70,   70,   27,   70,   70,   70,   70,   70,   70,   70,
		 /*  2270 */    70,   36,   70,   70,   70,   40,   70,   42,   43,   44,
		 /*  2280 */    45,   46,   70,   48,   49,   50,   51,   52,   53,   54,
		 /*  2290 */    55,   56,   57,   58,    1,    2,    3,    4,    5,   70,
		 /*  2300 */     7,    8,    9,   10,   11,   12,   13,   14,   15,   16,
		 /*  2310 */    17,   18,   70,   20,   70,   70,   70,   70,   70,   70,
		 /*  2320 */    70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
		 /*  2330 */    37,   38,   39,    1,    2,    3,    4,    5,   70,    7,
		 /*  2340 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
		 /*  2350 */    18,   70,   20,   70,   70,   70,   70,   70,   70,   70,
		 /*  2360 */    70,   70,   70,   70,   70,   70,   70,   70,   70,   37,
		 /*  2370 */    38,   39,    0,    1,    2,    3,    4,    5,   70,    7,
		 /*  2380 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
		 /*  2390 */    18,   19,    0,    1,    2,    3,    4,    5,   70,    7,
		 /*  2400 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
		 /*  2410 */    18,   19,    0,    1,    2,    3,    4,    5,   70,    7,
		 /*  2420 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
		 /*  2430 */    18,   19,    1,    2,    3,    4,    5,   70,    7,    8,
		 /*  2440 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
		 /*  2450 */    70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
		 /*  2460 */    70,   70,   70,   70,   70,   34,   70,    1,    2,    3,
		 /*  2470 */     4,    5,   70,    7,    8,    9,   10,   11,   12,   13,
		 /*  2480 */    14,   15,   16,   17,   18,   70,   70,   70,   70,   70,
		 /*  2490 */    70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
		 /*  2500 */    70,   35,   70,    1,    2,    3,    4,    5,   70,    7,
		 /*  2510 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
		 /*  2520 */    18,    1,    2,    3,    4,    5,   70,    7,    8,    9,
		 /*  2530 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   70,
		 /*  2540 */    38,   70,   70,   70,   70,   70,   70,   70,   70,   70,
		 /*  2550 */    70,   70,   70,   70,   70,   70,   70,   70,   38,   70,
		 /*  2560 */     1,    2,    3,    4,    5,   70,    7,    8,    9,   10,
		 /*  2570 */    11,   12,   13,   14,   15,   16,   17,   18,    1,    2,
		 /*  2580 */     3,    4,    5,   70,    7,    8,    9,   10,   11,   12,
		 /*  2590 */    13,   14,   15,   16,   17,   18,   70,   38,   70,   70,
		 /*  2600 */    70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
		 /*  2610 */    70,   70,   70,   70,   70,   38,   70,   70,   70,   70,
		 /*  2620 */    70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
		 /*  2630 */    70,   70,   70,   70,   70,   70,   70,   70,
		};

		private readonly int[] yy_shift_ofst =
		{
		 /*     0 */   104, 2124, 2161, 2161, 2161, 2161, 2161,  101, 2161, 2161,
		 /*    10 */  2161, 2161, 2161, 2161, 2161, 2161, 2161, 2161, 2161, 2161,
		 /*    20 */  2161, 2161, 2161, 2161, 2161, 2161, 2161, 2161, 2161, 2161,
		 /*    30 */  2161, 2161, 2161, 2161, 2161, 1152, 1392, 2161, 2161, 2161,
		 /*    40 */  2161, 2161, 2161, 2161, 2161, 2161, 2161, 2161, 2161, 2161,
		 /*    50 */  2161, 2161,   92,  357,   23,    0,   48,   96,  144,  192,
		 /*    60 */   240,  288,  336,  384,  432,  480,  528,  576,  624,  672,
		 /*    70 */   720,  768,  816,  864,  912,  960, 1008, 1056, 1104, 1192,
		 /*    80 */  1232, 1272, 1312, 1352, 1440, 1480, 1520, 1560, 1600, 1640,
		 /*    90 */  1680, 1720, 1760, 1800, 1840, 1880, 1920, 1960, 2000, 2040,
		 /*   100 */  2080, 2120, 2198, 2235, 2293, 2332, 2372, 2392, 2412, 2431,
		 /*   110 */  2466, 2502, 2520, 2559, 2577,  167,  265,  358,  332,   53,
		 /*   120 */   339,  340,  343,  386,  368,  342,  376,  354,  405,  407,
		 /*   130 */   408,
		};

		private readonly int[] yy_reduce_ofst =
		{
		 /*     0 */   -27,  -45,  -26,    3,   22,   51,   14,  -19,   27,   71,
		 /*    10 */    73,   99,  102,  110,  118,  121,  123,  147,  149,  158,
		 /*    20 */   166,  169,  171,  195,  197,  206,  214,  216,  219,  243,
		 /*    30 */   245,  254,  262,  264,  267,  -43,  -43,  -30,    5,   18,
		 /*    40 */    55,   76,  105,  114,  151,  153,  162,  168,  201,  210,
		 /*    50 */   247,  249,  260,   54,  299,
		};

		private readonly int[] yy_default =
		{
		 /*     0 */   198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
		 /*    10 */   198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
		 /*    20 */   198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
		 /*    30 */   198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
		 /*    40 */   198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
		 /*    50 */   198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
		 /*    60 */   198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
		 /*    70 */   198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
		 /*    80 */   198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
		 /*    90 */   198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
		 /*   100 */   198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
		 /*   110 */   198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
		 /*   120 */   198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
		 /*   130 */   198,
		};

		private readonly int[] yyFallback =
		{
		};

		private readonly string[] yyTokenName =
		{
		  /*    0 */ "$",
		  /*    1 */ "BINARY_AMPERSAND",
		  /*    2 */ "BINARY_AT",
		  /*    3 */ "BINARY_CARET",
		  /*    4 */ "BINARY_DOLLAR",
		  /*    5 */ "BINARY_DOUBLE_STAR",
		  /*    6 */ "BINARY_EQUAL",
		  /*    7 */ "BINARY_EXCLAMATION",
		  /*    8 */ "BINARY_HASH",
		  /*    9 */ "BINARY_MINUS",
		  /*   10 */ "BINARY_PERCENT",
		  /*   11 */ "BINARY_PERIOD",
		  /*   12 */ "BINARY_PIPE",
		  /*   13 */ "BINARY_PLUS",
		  /*   14 */ "BINARY_QUESTION",
		  /*   15 */ "BINARY_SLASH",
		  /*   16 */ "BINARY_SPACE",
		  /*   17 */ "BINARY_STAR",
		  /*   18 */ "BINARY_TILDE",
		  /*   19 */ "COLON",
		  /*   20 */ "COMMA",
		  /*   21 */ "ERROR",
		  /*   22 */ "F",
		  /*   23 */ "IDENTIFIER",
		  /*   24 */ "INTEGER",
		  /*   25 */ "LABEL",
		  /*   26 */ "LEFT_ANGLE_BRACKET",
		  /*   27 */ "LEFT_PAREN",
		  /*   28 */ "LEFT_SQUARE_BRACKET",
		  /*   29 */ "MATCH_DELETE",
		  /*   30 */ "MATCH_ONLY",
		  /*   31 */ "MATCH_REPLACE",
		  /*   32 */ "NO_LABEL",
		  /*   33 */ "NULL",
		  /*   34 */ "OBJECT_DELETE",
		  /*   35 */ "OBJECT_REPLACE",
		  /*   36 */ "REAL",
		  /*   37 */ "RIGHT_ANGLE_BRACKET",
		  /*   38 */ "RIGHT_PAREN",
		  /*   39 */ "RIGHT_SQUARE_BRACKET",
		  /*   40 */ "S",
		  /*   41 */ "SPACE",
		  /*   42 */ "STRING",
		  /*   43 */ "UNARY_AMPERSAND",
		  /*   44 */ "UNARY_AT",
		  /*   45 */ "UNARY_CARET",
		  /*   46 */ "UNARY_DOLLAR",
		  /*   47 */ "UNARY_EQUAL",
		  /*   48 */ "UNARY_EXCLAMATION",
		  /*   49 */ "UNARY_HASH",
		  /*   50 */ "UNARY_MINUS",
		  /*   51 */ "UNARY_PERCENT",
		  /*   52 */ "UNARY_PERIOD",
		  /*   53 */ "UNARY_PIPE",
		  /*   54 */ "UNARY_PLUS",
		  /*   55 */ "UNARY_QUESTION",
		  /*   56 */ "UNARY_SLASH",
		  /*   57 */ "UNARY_STAR",
		  /*   58 */ "UNARY_TILDE",
		  /*   59 */ "program_line",
		  /*   60 */ "label_field",
		  /*   61 */ "statement_field",
		  /*   62 */ "goto_field",
		  /*   63 */ "goto",
		  /*   64 */ "goto_success",
		  /*   65 */ "goto_failure",
		  /*   66 */ "element",
		  /*   67 */ "expression",
		  /*   68 */ "reference",
		  /*   69 */ "argument_list",
		};

		private readonly string[] yyRuleName =
		{
		 /*   0 */ "statement_field ::= element UNARY_EQUAL",
		 /*   1 */ "statement_field ::= element MATCH_REPLACE expression OBJECT_REPLACE expression",
		 /*   2 */ "statement_field ::= element MATCH_DELETE expression OBJECT_DELETE",
		 /*   3 */ "statement_field ::= element MATCH_ONLY expression",
		 /*   4 */ "expression ::= element reference",
		 /*   5 */ "expression ::= element BINARY_EQUAL expression",
		 /*   6 */ "expression ::= expression BINARY_TILDE expression",
		 /*   7 */ "expression ::= expression BINARY_QUESTION expression",
		 /*   8 */ "expression ::= expression BINARY_DOLLAR expression",
		 /*   9 */ "expression ::= expression BINARY_PERIOD expression",
		 /*  10 */ "expression ::= expression BINARY_CARET expression",
		 /*  11 */ "expression ::= expression BINARY_EXCLAMATION expression",
		 /*  12 */ "expression ::= expression BINARY_DOUBLE_STAR expression",
		 /*  13 */ "expression ::= expression BINARY_PERCENT expression",
		 /*  14 */ "expression ::= expression BINARY_STAR expression",
		 /*  15 */ "expression ::= expression BINARY_SLASH expression",
		 /*  16 */ "expression ::= expression BINARY_HASH expression",
		 /*  17 */ "expression ::= expression BINARY_PLUS expression",
		 /*  18 */ "expression ::= expression BINARY_MINUS expression",
		 /*  19 */ "expression ::= expression BINARY_AT expression",
		 /*  20 */ "expression ::= expression BINARY_SPACE expression",
		 /*  21 */ "expression ::= expression BINARY_PIPE expression",
		 /*  22 */ "expression ::= expression BINARY_AMPERSAND expression",
		 /*  23 */ "element ::= IDENTIFIER",
		 /*  24 */ "element ::= F",
		 /*  25 */ "element ::= S",
		 /*  26 */ "element ::= INTEGER",
		 /*  27 */ "element ::= REAL",
		 /*  28 */ "element ::= STRING",
		 /*  29 */ "element ::= IDENTIFIER LEFT_PAREN RIGHT_PAREN",
		 /*  30 */ "element ::= IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN",
		 /*  31 */ "element ::= UNARY_AMPERSAND element",
		 /*  32 */ "element ::= UNARY_AT element",
		 /*  33 */ "element ::= UNARY_CARET element",
		 /*  34 */ "element ::= UNARY_DOLLAR element",
		 /*  35 */ "element ::= UNARY_EXCLAMATION element",
		 /*  36 */ "element ::= UNARY_HASH element",
		 /*  37 */ "element ::= UNARY_MINUS element",
		 /*  38 */ "element ::= UNARY_PERCENT element",
		 /*  39 */ "element ::= UNARY_PERIOD element",
		 /*  40 */ "element ::= UNARY_PIPE element",
		 /*  41 */ "element ::= UNARY_PLUS element",
		 /*  42 */ "element ::= UNARY_QUESTION element",
		 /*  43 */ "element ::= UNARY_SLASH element",
		 /*  44 */ "element ::= UNARY_STAR element",
		 /*  45 */ "element ::= UNARY_TILDE element",
		 /*  46 */ "goto ::= LEFT_PAREN expression RIGHT_PAREN",
		 /*  47 */ "goto_failure ::= F LEFT_PAREN expression RIGHT_PAREN",
		 /*  48 */ "goto_success ::= S LEFT_PAREN expression RIGHT_PAREN",
		 /*  49 */ "program_line ::= label_field statement_field",
		 /*  50 */ "program_line ::= label_field statement_field goto_field",
		 /*  51 */ "label_field ::= LABEL",
		 /*  52 */ "label_field ::= NO_LABEL",
		 /*  53 */ "goto_field ::= COLON goto",
		 /*  54 */ "goto_field ::= COLON goto_success",
		 /*  55 */ "goto_field ::= COLON goto_failure",
		 /*  56 */ "goto_field ::= COLON goto_failure goto_success",
		 /*  57 */ "goto_field ::= COLON goto_success goto_failure",
		 /*  58 */ "statement_field ::= expression",
		 /*  59 */ "expression ::= element",
		 /*  60 */ "element ::= LEFT_PAREN expression RIGHT_PAREN",
		 /*  61 */ "reference ::= LEFT_SQUARE_BRACKET argument_list RIGHT_SQUARE_BRACKET",
		 /*  62 */ "reference ::= LEFT_ANGLE_BRACKET argument_list RIGHT_ANGLE_BRACKET",
		 /*  63 */ "reference ::= reference LEFT_SQUARE_BRACKET argument_list RIGHT_SQUARE_BRACKET",
		 /*  64 */ "reference ::= reference LEFT_ANGLE_BRACKET argument_list RIGHT_ANGLE_BRACKET",
		 /*  65 */ "argument_list ::= expression",
		 /*  66 */ "argument_list ::= argument_list COMMA expression",
		};

		private readonly Rule[] yyRuleInfo =
		{
		  new Rule(   61,   -2 ), /* (0) statement_field ::= element UNARY_EQUAL */
		  new Rule(   61,   -5 ), /* (1) statement_field ::= element MATCH_REPLACE expression OBJECT_REPLACE expression */
		  new Rule(   61,   -4 ), /* (2) statement_field ::= element MATCH_DELETE expression OBJECT_DELETE */
		  new Rule(   61,   -3 ), /* (3) statement_field ::= element MATCH_ONLY expression */
		  new Rule(   67,   -2 ), /* (4) expression ::= element reference */
		  new Rule(   67,   -3 ), /* (5) expression ::= element BINARY_EQUAL expression */
		  new Rule(   67,   -3 ), /* (6) expression ::= expression BINARY_TILDE expression */
		  new Rule(   67,   -3 ), /* (7) expression ::= expression BINARY_QUESTION expression */
		  new Rule(   67,   -3 ), /* (8) expression ::= expression BINARY_DOLLAR expression */
		  new Rule(   67,   -3 ), /* (9) expression ::= expression BINARY_PERIOD expression */
		  new Rule(   67,   -3 ), /* (10) expression ::= expression BINARY_CARET expression */
		  new Rule(   67,   -3 ), /* (11) expression ::= expression BINARY_EXCLAMATION expression */
		  new Rule(   67,   -3 ), /* (12) expression ::= expression BINARY_DOUBLE_STAR expression */
		  new Rule(   67,   -3 ), /* (13) expression ::= expression BINARY_PERCENT expression */
		  new Rule(   67,   -3 ), /* (14) expression ::= expression BINARY_STAR expression */
		  new Rule(   67,   -3 ), /* (15) expression ::= expression BINARY_SLASH expression */
		  new Rule(   67,   -3 ), /* (16) expression ::= expression BINARY_HASH expression */
		  new Rule(   67,   -3 ), /* (17) expression ::= expression BINARY_PLUS expression */
		  new Rule(   67,   -3 ), /* (18) expression ::= expression BINARY_MINUS expression */
		  new Rule(   67,   -3 ), /* (19) expression ::= expression BINARY_AT expression */
		  new Rule(   67,   -3 ), /* (20) expression ::= expression BINARY_SPACE expression */
		  new Rule(   67,   -3 ), /* (21) expression ::= expression BINARY_PIPE expression */
		  new Rule(   67,   -3 ), /* (22) expression ::= expression BINARY_AMPERSAND expression */
		  new Rule(   66,   -1 ), /* (23) element ::= IDENTIFIER */
		  new Rule(   66,   -1 ), /* (24) element ::= F */
		  new Rule(   66,   -1 ), /* (25) element ::= S */
		  new Rule(   66,   -1 ), /* (26) element ::= INTEGER */
		  new Rule(   66,   -1 ), /* (27) element ::= REAL */
		  new Rule(   66,   -1 ), /* (28) element ::= STRING */
		  new Rule(   66,   -3 ), /* (29) element ::= IDENTIFIER LEFT_PAREN RIGHT_PAREN */
		  new Rule(   66,   -4 ), /* (30) element ::= IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN */
		  new Rule(   66,   -2 ), /* (31) element ::= UNARY_AMPERSAND element */
		  new Rule(   66,   -2 ), /* (32) element ::= UNARY_AT element */
		  new Rule(   66,   -2 ), /* (33) element ::= UNARY_CARET element */
		  new Rule(   66,   -2 ), /* (34) element ::= UNARY_DOLLAR element */
		  new Rule(   66,   -2 ), /* (35) element ::= UNARY_EXCLAMATION element */
		  new Rule(   66,   -2 ), /* (36) element ::= UNARY_HASH element */
		  new Rule(   66,   -2 ), /* (37) element ::= UNARY_MINUS element */
		  new Rule(   66,   -2 ), /* (38) element ::= UNARY_PERCENT element */
		  new Rule(   66,   -2 ), /* (39) element ::= UNARY_PERIOD element */
		  new Rule(   66,   -2 ), /* (40) element ::= UNARY_PIPE element */
		  new Rule(   66,   -2 ), /* (41) element ::= UNARY_PLUS element */
		  new Rule(   66,   -2 ), /* (42) element ::= UNARY_QUESTION element */
		  new Rule(   66,   -2 ), /* (43) element ::= UNARY_SLASH element */
		  new Rule(   66,   -2 ), /* (44) element ::= UNARY_STAR element */
		  new Rule(   66,   -2 ), /* (45) element ::= UNARY_TILDE element */
		  new Rule(   63,   -3 ), /* (46) goto ::= LEFT_PAREN expression RIGHT_PAREN */
		  new Rule(   65,   -4 ), /* (47) goto_failure ::= F LEFT_PAREN expression RIGHT_PAREN */
		  new Rule(   64,   -4 ), /* (48) goto_success ::= S LEFT_PAREN expression RIGHT_PAREN */
		  new Rule(   59,   -2 ), /* (49) program_line ::= label_field statement_field */
		  new Rule(   59,   -3 ), /* (50) program_line ::= label_field statement_field goto_field */
		  new Rule(   60,   -1 ), /* (51) label_field ::= LABEL */
		  new Rule(   60,   -1 ), /* (52) label_field ::= NO_LABEL */
		  new Rule(   62,   -2 ), /* (53) goto_field ::= COLON goto */
		  new Rule(   62,   -2 ), /* (54) goto_field ::= COLON goto_success */
		  new Rule(   62,   -2 ), /* (55) goto_field ::= COLON goto_failure */
		  new Rule(   62,   -3 ), /* (56) goto_field ::= COLON goto_failure goto_success */
		  new Rule(   62,   -3 ), /* (57) goto_field ::= COLON goto_success goto_failure */
		  new Rule(   61,   -1 ), /* (58) statement_field ::= expression */
		  new Rule(   67,   -1 ), /* (59) expression ::= element */
		  new Rule(   66,   -3 ), /* (60) element ::= LEFT_PAREN expression RIGHT_PAREN */
		  new Rule(   68,   -3 ), /* (61) reference ::= LEFT_SQUARE_BRACKET argument_list RIGHT_SQUARE_BRACKET */
		  new Rule(   68,   -3 ), /* (62) reference ::= LEFT_ANGLE_BRACKET argument_list RIGHT_ANGLE_BRACKET */
		  new Rule(   68,   -4 ), /* (63) reference ::= reference LEFT_SQUARE_BRACKET argument_list RIGHT_SQUARE_BRACKET */
		  new Rule(   68,   -4 ), /* (64) reference ::= reference LEFT_ANGLE_BRACKET argument_list RIGHT_ANGLE_BRACKET */
		  new Rule(   69,   -1 ), /* (65) argument_list ::= expression */
		  new Rule(   69,   -3 ), /* (66) argument_list ::= argument_list COMMA expression */
		};

		    // Reduce Actions

		internal YYMINORTYPE ExecuteReductions(int ruleno)
		{
			YYMINORTYPE yylhsminor = new();
			switch(ruleno)
			{
				case 0: /* statement_field ::= element UNARY_EQUAL */
					{Line.AddCommand("UNARY_EQUAL");}
					break;
				case 1: /* statement_field ::= element MATCH_REPLACE expression OBJECT_REPLACE expression */
					{Line.AddCommand("MATCH_REPLACE");}
					break;
				case 2: /* statement_field ::= element MATCH_DELETE expression OBJECT_DELETE */
					{Line.AddCommand("MATCH_DELETE");}
					break;
				case 3: /* statement_field ::= element MATCH_ONLY expression */
					{Line.AddCommand("MATCH_ONLY");}
					break;
				case 4: /* expression ::= element reference */
					{Line.AddCommand("REFERENCE");}
					break;
				case 5: /* expression ::= element BINARY_EQUAL expression */
					{Line.AddCommand("BINARY_EQUAL");}
					break;
				case 6: /* expression ::= expression BINARY_TILDE expression */
					{Line.AddCommand("BINARY_TILDE");}
					break;
				case 7: /* expression ::= expression BINARY_QUESTION expression */
					{Line.AddCommand("BINARY_QUESTION");}
					break;
				case 8: /* expression ::= expression BINARY_DOLLAR expression */
					{Line.AddCommand("BINARY_DOLLAR");}
					break;
				case 9: /* expression ::= expression BINARY_PERIOD expression */
					{Line.AddCommand("BINARY_PERIOD");}
					break;
				case 10: /* expression ::= expression BINARY_CARET expression */
					{Line.AddCommand("BINARY_CARET");}
					break;
				case 11: /* expression ::= expression BINARY_EXCLAMATION expression */
					{Line.AddCommand("BINARY_EXCLAMATION");}
					break;
				case 12: /* expression ::= expression BINARY_DOUBLE_STAR expression */
					{Line.AddCommand("BINARY_DOUBLE_STAR");}
					break;
				case 13: /* expression ::= expression BINARY_PERCENT expression */
					{Line.AddCommand("BINARY_PERCENT");}
					break;
				case 14: /* expression ::= expression BINARY_STAR expression */
					{Line.AddCommand("BINARY_STAR");}
					break;
				case 15: /* expression ::= expression BINARY_SLASH expression */
					{Line.AddCommand("BINARY_SLASH");}
					break;
				case 16: /* expression ::= expression BINARY_HASH expression */
					{Line.AddCommand("BINARY_HASH");}
					break;
				case 17: /* expression ::= expression BINARY_PLUS expression */
					{Line.AddCommand("BINARY_PLUS");}
					break;
				case 18: /* expression ::= expression BINARY_MINUS expression */
					{Line.AddCommand("BINARY_MINUS");}
					break;
				case 19: /* expression ::= expression BINARY_AT expression */
					{Line.AddCommand("BINARY_AT");}
					break;
				case 20: /* expression ::= expression BINARY_SPACE expression */
					{Line.AddCommand("BINARY_SPACE");}
					break;
				case 21: /* expression ::= expression BINARY_PIPE expression */
					{Line.AddCommand("BINARY_PIPE");}
					break;
				case 22: /* expression ::= expression BINARY_AMPERSAND expression */
					{Line.AddCommand("BINARY_AMPERSAND");}
					break;
				case 23: /* element ::= IDENTIFIER */
				case 24: /* element ::= F */
				case 25: /* element ::= S */
					{Line.AddCommand("IDENTIFIER",ParserStack[0].minor.ToString());}
					break;
				case 26: /* element ::= INTEGER */
					{Line.AddCommand("INTEGER",ParserStack[0].minor.ToString());}
					break;
				case 27: /* element ::= REAL */
					{Line.AddCommand("REAL",ParserStack[0].minor.ToString());}
					break;
				case 28: /* element ::= STRING */
					{Line.AddCommand("STRING",ParserStack[0].minor.ToString());}
					break;
				case 29: /* element ::= IDENTIFIER LEFT_PAREN RIGHT_PAREN */
					{Line.AddCommand("FUNCTION",ParserStack[-2].minor.ToString());}
					break;
				case 30: /* element ::= IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN */
					{Line.AddCommand("FUNCTION",ParserStack[-3].minor.ToString());}
					break;
				case 31: /* element ::= UNARY_AMPERSAND element */
					{Line.AddCommand("UNARY_AMPERSAND");}
					break;
				case 32: /* element ::= UNARY_AT element */
					{Line.AddCommand("UNARY_AT");}
					break;
				case 33: /* element ::= UNARY_CARET element */
					{Line.AddCommand("UNARY_CARET");}
					break;
				case 34: /* element ::= UNARY_DOLLAR element */
					{Line.AddCommand("UNARY_DOLLAR");}
					break;
				case 35: /* element ::= UNARY_EXCLAMATION element */
					{Line.AddCommand("UNARY_EXCLAMATION");}
					break;
				case 36: /* element ::= UNARY_HASH element */
					{Line.AddCommand("UNARY_HASH");}
					break;
				case 37: /* element ::= UNARY_MINUS element */
					{Line.AddCommand("UNARY_MINUS");}
					break;
				case 38: /* element ::= UNARY_PERCENT element */
					{Line.AddCommand("UNARY_PERCENT");}
					break;
				case 39: /* element ::= UNARY_PERIOD element */
					{Line.AddCommand("UNARY_PERIOD");}
					break;
				case 40: /* element ::= UNARY_PIPE element */
					{Line.AddCommand("UNARY_PIPE");}
					break;
				case 41: /* element ::= UNARY_PLUS element */
					{Line.AddCommand("UNARY_PLUS");}
					break;
				case 42: /* element ::= UNARY_QUESTION element */
					{Line.AddCommand("UNARY_QUESTION");}
					break;
				case 43: /* element ::= UNARY_SLASH element */
					{Line.AddCommand("UNARY_SLASH");}
					break;
				case 44: /* element ::= UNARY_STAR element */
					{Line.AddCommand("UNARY_STAR");}
					break;
				case 45: /* element ::= UNARY_TILDE element */
					{Line.AddCommand("UNARY_TILDE");}
					break;
				case 46: /* goto ::= LEFT_PAREN expression RIGHT_PAREN */
					{Line.AddCommand("GOTO");}
					break;
				case 47: /* goto_failure ::= F LEFT_PAREN expression RIGHT_PAREN */
					{Line.AddCommand("FGOTO");}
					break;
				case 48: /* goto_success ::= S LEFT_PAREN expression RIGHT_PAREN */
					{Line.AddCommand("SGOTO");}
					break;
				default:
					/* (49) program_line ::= label_field statement_field */
					/* (50) program_line ::= label_field statement_field goto_field */
					/* (51) label_field ::= LABEL */
					/* (52) label_field ::= NO_LABEL */
					/* (53) goto_field ::= COLON goto */
					/* (54) goto_field ::= COLON goto_success */
					/* (55) goto_field ::= COLON goto_failure */
					/* (56) goto_field ::= COLON goto_failure goto_success */
					/* (57) goto_field ::= COLON goto_success goto_failure */
					/* (58) statement_field ::= expression */
					/* (59) expression ::= element */
					/* (60) element ::= LEFT_PAREN expression RIGHT_PAREN */
					/* (61) reference ::= LEFT_SQUARE_BRACKET argument_list RIGHT_SQUARE_BRACKET */
					/* (62) reference ::= LEFT_ANGLE_BRACKET argument_list RIGHT_ANGLE_BRACKET */
					/* (63) reference ::= reference LEFT_SQUARE_BRACKET argument_list RIGHT_SQUARE_BRACKET */
					/* (64) reference ::= reference LEFT_ANGLE_BRACKET argument_list RIGHT_ANGLE_BRACKET */
					/* (65) argument_list ::= expression */
					/* (66) argument_list ::= argument_list COMMA expression */
					break;
			}
			return yylhsminor;
		}

		internal void SyntaxError(int yymajor, YYMINORTYPE yyminor)
		{
			throw new SyntaxError();
		}

		internal void Accept()
		{
		}

		internal void ParseFailed()
		{
		}
	}
}
